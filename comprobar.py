#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Sep 04, 2022 01:34:09 AM -03  platform: Windows NT

import sys
import tkinter as tk
from tkinter import messagebox
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import comprobar_support
import autosave
import administrador

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1

class Toplevel1:
      def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+660+210")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")

        self.top = top

        _style_code()
        self.TEntry1 = ttk.Entry(self.top)
        self.TEntry1.place(relx=0.483, rely=0.378, relheight=0.047
                , relwidth=0.21)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="fleur")

        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(relx=0.3, rely=0.356, height=39, width=85)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {Segoe UI} -size 17")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''CÃ³digo''')
        self.TLabel1.configure(compound='left')

        self.btnBuscar = ttk.Button(self.top)
        self.btnBuscar.place(relx=0.3, rely=0.622, height=35, width=96)
        self.btnBuscar.configure(takefocus="")
        self.btnBuscar.configure(text='''Buscar''')
        self.btnBuscar.configure(compound='left')
        self.btnBuscar.configure(cursor="fleur")
        self.btnBuscar.configure(command=self.buscar)

        self.btnSalir = ttk.Button(self.top)
        self.btnSalir.place(relx=0.583, rely=0.622, height=35, width=96)
        self.btnSalir.configure(takefocus="")
        self.btnSalir.configure(text='''Salir''')
        self.btnSalir.configure(compound='left')
        self.btnSalir.configure(cursor="fleur")
        self.btnSalir.configure(command=self.openMain)

        self.TLabel2 = ttk.Label(self.top)
        self.TLabel2.place(relx=0.0, rely=0.0, height=59, width=595)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {Segoe UI} -size 23")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Comprobar Existencia''')
        self.TLabel2.configure(compound='left')

      def openMain(self):
         comprobar_support.cerrar()
         autosave.start_up()
      
      def buscar(self):
         pertenece = administrador.buscar(self.TEntry1.get())
         if pertenece: 
            messagebox.showinfo('CORRECTO', 'Usted posee la figurita de codigo {}'.format(self.TEntry1.get()))


def start_up():
    comprobar_support.main()

if __name__ == '__main__':
    comprobar_support.main()




