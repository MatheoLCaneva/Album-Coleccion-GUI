#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Sep 01, 2022 01:24:15 AM -03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import messagebox
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import menuAgregar_support
import administrador
import autosave

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1



class Toplevel1:
      def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+660+210")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")

        self.top = top

        _style_code()
        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(relx=0.017, rely=0.133, relheight=0.856
                , relwidth=0.958)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.TLabel2 = ttk.Label(self.TFrame1)
        self.TLabel2.place(relx=0.261, rely=0.13, height=39, width=93)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {Segoe UI Symbol} -size 17")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Nombre''')
        self.TLabel2.configure(compound='left')

        self.TLabel3 = ttk.Label(self.TFrame1)
        self.TLabel3.place(relx=0.261, rely=0.286, height=39, width=95)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="-family {Segoe UI Symbol} -size 17")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Apellido''')
        self.TLabel3.configure(compound='left')

        self.TLabel4 = ttk.Label(self.TFrame1)
        self.TLabel4.place(relx=0.261, rely=0.442, height=39, width=85)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="-family {Segoe UI Symbol} -size 17")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Código''')
        self.TLabel4.configure(compound='left')

        self.TEntry1 = ttk.Entry(self.TFrame1)
        self.TEntry1.place(relx=0.504, rely=0.156, relheight=0.055
                , relwidth=0.219)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.TEntry2 = ttk.Entry(self.TFrame1)
        self.TEntry2.place(relx=0.504, rely=0.312, relheight=0.055
                , relwidth=0.219)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")

        self.TEntry3 = ttk.Entry(self.TFrame1)
        self.TEntry3.place(relx=0.504, rely=0.468, relheight=0.055
                , relwidth=0.219)
        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="ibeam")

        self.btnAgregar = ttk.Button(self.TFrame1)
        self.btnAgregar.place(relx=0.261, rely=0.727, height=45, width=106)
        self.btnAgregar.configure(takefocus="")
        self.btnAgregar.configure(text='''Agregar''')
        self.btnAgregar.configure(compound='left')
        self.btnAgregar.configure(command=self.guardar)

        self.btnSalir = ttk.Button(self.TFrame1)
        self.btnSalir.place(relx=0.557, rely=0.727, height=45, width=106)
        self.btnSalir.configure(takefocus="")
        self.btnSalir.configure(text='''Salir''')
        self.btnSalir.configure(compound='left')
        self.btnSalir.configure(command=self.openMain)

        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(relx=0.0, rely=0.0, height=59, width=595)
        self.TLabel1.configure(background="#8ce7f0")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {Segoe UI Black} -size 21 -weight bold")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Agregar Figurita''')
        self.TLabel1.configure(compound='left')

      def guardar(self):
         administrador.almacenar(self.TEntry1.get(), self.TEntry2.get(), self.TEntry3.get())
         administrador.mandarMensaje(self.TEntry1.get(), self.TEntry2.get(), self.TEntry3.get())
         self.TEntry1.delete(0, END)
         self.TEntry2.delete(0, END)
         self.TEntry3.delete(0, END)
         messagebox.showinfo('Información', 'Figurita agregada correctamente')

      def openMain(self):
         menuAgregar_support.cerrar()
         autosave.start_up()


def start_up():
    menuAgregar_support.main()

if __name__ == '__main__':
    menuAgregar_support.main()




